{% set name = "daphne" %}
{% set version = "1.3.0" %}
{% set hash_type = "sha256" %}
{% set hash_value = "d124bb6b63c45ee7fa7fae3a966055dd16fe17336edaa7254588871ac495b5f6" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  fn: '{{ name }}-{{ version }}.tar.gz'
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  '{{ hash_type }}': '{{ hash_value }}'

build:
  number: 0
  entry_points:
    - daphne = daphne.cli:CommandLineInterface.entrypoint
  script: python setup.py install  --single-version-externally-managed --record=record.txt

requirements:
  build:
    - python
    - setuptools
    - asgiref >=1.1.2
    - twisted >=17.1
    - autobahn >=0.18
  run:
    - python
    - asgiref >=1.1.2
    - twisted >=17.1
    - autobahn >=0.18

test:
  imports:
    - daphne
    - daphne.tests
    - twisted.plugins
  commands:
    - daphne --help

about:
  home: https://github.com/django/daphne
  license: BSD 3-clause 
  license_family: BSD
  summary: Django ASGI (HTTP/WebSocket) server
  description: "daphne\n======\n\n.. image:: https://api.travis-ci.org/django/daphne.svg\n    :target: https://travis-ci.org/django/daphne\n\n.. image:: https://img.shields.io/pypi/v/daphne.svg\n    :target:\
    \ https://pypi.python.org/pypi/daphne\n\nDaphne is a HTTP, HTTP2 and WebSocket protocol server for\n`ASGI <https://channels.readthedocs.io/en/latest/asgi.html>`_, and developed\nto power Django Channels.\n\
    \nIt supports automatic negotiation of protocols; there's no need for URL\nprefixing to determine WebSocket endpoints versus HTTP endpoints.\n\n\nRunning\n-------\n\nSimply point Daphne to your ASGI\
    \ channel layer instance, and optionally\nset a bind address and port (defaults to localhost, port 8000)::\n\n    daphne -b 0.0.0.0 -p 8001 django_project.asgi:channel_layer\n\nIf you intend to run\
    \ daphne behind a proxy server you can use UNIX\nsockets to communicate between the two::\n\n    daphne -u /tmp/daphne.sock django_project.asgi:channel_layer\n\nIf daphne is being run inside a process\
    \ manager such as\n`Circus <https://github.com/circus-tent/circus/>`_ you might\nwant it to bind to a file descriptor passed down from a parent process.\nTo achieve this you can use the --fd flag::\n\
    \n    daphne --fd 5 django_project.asgi:channel_layer\n\nIf you want more control over the port/socket bindings you can fall back to\nusing `twisted's endpoint description strings\n<http://twistedmatrix.com/documents/current/api/twisted.internet.endpoints.html#serverFromString>`_\n\
    by using the `--endpoint (-e)` flag, which can be used multiple times.\nThis line would start a SSL server on port 443, assuming that `key.pem` and `crt.pem`\nexist in the current directory (requires\
    \ pyopenssl to be installed)::\n\n    daphne -e ssl:443:privateKey=key.pem:certKey=crt.pem django_project.asgi:channel_layer\n\nEndpoints even let you use the ``txacme`` endpoint syntax to get automatic\
    \ certificates\nfrom Let's Encrypt, which you can read more about at http://txacme.readthedocs.io/en/stable/.\n\nTo see all available command line options run daphne with the *-h* flag.\n\n\nHTTP/2\
    \ Support\n--------------\n\nDaphne 1.1 and above supports terminating HTTP/2 connections natively. You'll\nneed to do a couple of things to get it working, though. First, you need to\nmake sure you\
    \ install the Twisted ``http2`` and ``tls`` extras::\n\n    pip install -U Twisted[tls,http2]\n\nNext, because all current browsers only support HTTP/2 when using TLS, you will\nneed to start Daphne\
    \ with TLS turned on, which can be done using the Twisted endpoint syntax::\n\n    daphne -e ssl:443:privateKey=key.pem:certKey=crt.pem django_project.asgi:channel_layer\n\nAlternatively, you can use\
    \ the ``txacme`` endpoint syntax or anything else that\nenables TLS under the hood.\n\nYou will also need to be on a system that has **OpenSSL 1.0.2 or greater**; if you are\nusing Ubuntu, this means\
    \ you need at least 16.04.\n\nNow, when you start up Daphne, it should tell you this in the log::\n\n    2017-03-18 19:14:02,741 INFO     Starting server at ssl:port=8000:privateKey=privkey.pem:certKey=cert.pem,\
    \ channel layer django_project.asgi:channel_layer.\n    2017-03-18 19:14:02,742 INFO     HTTP/2 support enabled\n\nThen, connect with a browser that supports HTTP/2, and everything should be\nworking.\
    \ It's often hard to tell that HTTP/2 is working, as the log Daphne gives you\nwill be identical (it's HTTP, after all), and most browsers don't make it obvious\nin their network inspector windows.\
    \ There are browser extensions that will let\nyou know clearly if it's working or not.\n\nDaphne only supports \"normal\" requests over HTTP/2 at this time; there is not\nyet support for extended features\
    \ like Server Push. It will, however, result in\nmuch faster connections and lower overheads.\n\nIf you have a reverse proxy in front of your site to serve static files or\nsimilar, HTTP/2 will only\
    \ work if that proxy understands and passes through the\nconnection correctly.\n\n\nRoot Path (SCRIPT_NAME)\n-----------------------\n\nIn order to set the root path for Daphne, which is the equivalent\
    \ of the\nWSGI ``SCRIPT_NAME`` setting, you have two options:\n\n* Pass a header value ``Daphne-Root-Path``, with the desired root path as a\n  URLencoded ASCII value. This header will not be passed\
    \ down to applications.\n\n* Set the ``--root-path`` commandline option with the desired root path as a\n  URLencoded ASCII value.\n\nThe header takes precedence if both are set. As with ``SCRIPT_ALIAS``,\
    \ the value\nshould start with a slash, but not end with one; for example::\n\n    daphne --root-path=/forum django_project.asgi:channel_layer\n\nDependencies\n------------\n\nAll Channels projects\
    \ currently support Python 2.7, 3.4 and 3.5. `daphne` requires Twisted 17.1 or\ngreater.\n\n\nContributing\n------------\n\nPlease refer to the\n`main Channels contributing docs <https://github.com/django/channels/blob/master/CONTRIBUTING.rst>`_.\n\
    That also contains advice on how to set up the development environment and run the tests.\n\n\nMaintenance and Security\n------------------------\n\nTo report security issues, please contact security@djangoproject.com.\
    \ For GPG\nsignatures and more security process information, see\nhttps://docs.djangoproject.com/en/dev/internals/security/.\n\nTo report bugs or request new features, please open a new GitHub issue.\n\
    \nThis repository is part of the Channels project. For the shepherd and maintenance team, please see the\n`main Channels readme <https://github.com/django/channels/blob/master/README.rst>`_.\n"
  doc_url: https://channels.readthedocs.io/en/stable/
  dev_url: https://github.com/django/daphne

extra:
  recipe-maintainers: ''
